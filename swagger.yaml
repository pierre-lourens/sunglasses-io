# this is an example of the Uber API
# as a demonstration of an API spec in YAML
swagger: "2.0"
info:
  title: Sunglasses.io
  description: Purchase sunglasses with this great app
  version: "1.0.0"
# the domain of the service
host: localhost:3001
# array of all schemes that your API supports
schemes:
  - https
# will be prefixed to all paths
basePath: /api
produces:
  - application/json
paths:
  /brands:
    get:
      tags:
        - Brands
      summary: Brands Available
      description: |
        The brands endpoint returns a list of brands offered by the sunglasses.io store. The response includes the brand and its unique identifier.
      responses:
        "200":
          description: An array of brand objects
          schema:
            type: array
            items:
              $ref: "#/definitions/Brands"
        "404":
          description: "Invalid brand ID supplied"
        "500":
          description: "Server-side error."
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
  /brands/{id}/products:
    get:
      tags:
        - Brands
      summary: Products available for a brand
      description: |
        The brands/{id}/products endpoint returns a list of products associated with the given brand ID. The response includes each product object whose categoryId matches the brandId passed as a query parameter.
      parameters:
        - name: id
          in: path
          description: Category id for filtering
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: An array of products for a given brand
          schema:
            type: array
            items:
              $ref: "#/definitions/Products"
        "404":
          description: Invalid brand ID supplied
        "500":
          description: "Server-side error."
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
  /products:
    get:
      tags:
        - Products
      summary: Products in Store
      description: |
        The products endpoint returns a list of products offered by the sunglasses.io store. The response includes each product object. If a query is passed, it only includes those products whose description or name includes the query term.
      parameters:
        - name: search
          in: query
          description: Value that is used for filter of products
          required: false
          type: string
      responses:
        "200":
          description: An array of product objects (all of them or filtered by a query term)
          schema:
            type: array
            items:
              $ref: "#/definitions/Products"
        "500":
          description: "Server-side error."
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
  /login:
    post:
      tags:
        - Login
      summary: Allows access to other parts of application
      description: |
        The login endpoint takes parameters of username and password. If the username and password match a user in the system, they will be granted access to use other endpoints that begin wit /api/me.
      parameters:
        - in: body
          name: userLogin
          description: The username and password
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "200":
          description: Valid username and password, access token will be stored
        "400":
          description: Incorrectly formatted request
        "401":
          description: Invalid username or password.
        "418":
          description: Too many login attempts.
          schema:
            type: string
        "500":
          description: "Server-side error."
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
  "/me/cart":
    get:
      tags:
        - Me
      summary: Returns the values in the cart as array
      description: |
        The GET /me/cart endpoint returns the current values of the cart.
      responses:
        "200":
          description: Successfully added
        "401":
          description: You need to have access to this call to continue
        "500":
          description: "Server-side error."
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
        - Me
      summary: Deletes the entire cart
      description: |
        The DELETE /me/cart endpoint deletes the entire cart
      parameters:
        - name: accessToken
          in: query
          description: The user's unique access token after login
          required: true
          type: string
      responses:
        "200":
          description: Successful deleting.
        "401":
          description: You need to have access to this call to continue
        "500":
          description: "Server-side error."
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
        - Me
      summary: Allows posting new items to user's cart.
      description: |
        The POST /me/cart endpoint adds an item to the cart in state.
      parameters:
        - in: query
          name: product
          description: The product id being added
          required: true
          type: string
        - in: query
          name: accessToken
          description: The user's unique access token after login
          required: true
          type: string
      responses:
        "200":
          description: Successfully added
        "401":
          description: You need to have access to this call to continue
        "404":
          description: Item unable to be added.
        "500":
          description: "Server-side error."
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
  "/me/cart/{productId}":
    post:
      tags:
        - Me
      summary: updates the quantity for a product
      description: |
        The POST /me/cart endpoint updates the quantity for a product
      parameters:
        - name: productId
          in: path
          description: The product id being updated
          required: true
          type: string
        - in: query
          name: accessToken
          description: The user's unique access token after login
          required: true
          type: string
        - in: query
          name: newQuantity
          description: The new quantity for the item
          required: true
          type: string
      responses:
        "200":
          description: Successfully updated
        "401":
          description: You need to have access to this call to continue
        "404":
          description: Invalid brand ID supplied.
        "500":
          description: "Server-side error."
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
        - Me
      summary: Deletes the specified item from the cart
      description: |
        The DELETE /me/cart endpoint removes the specified item from the cart
      parameters:
        - name: productId
          in: path
          description: The product id being deleted
          required: true
          type: string
        - name: accessToken
          in: query
          description: The user's unique access token after login
          required: true
          type: string
      responses:
        "200":
          description: Successful deleting.
        "404":
          description: Invalid product id specified.
        "401":
          description: You need to have access to this call to continue
        "500":
          description: "Server-side error."
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
definitions:
  Brands:
    type: array
    items:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier representing a specific brand.
        name:
          type: string
          description: The name of the brand.
  Products:
    type: array
    items:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the product.
        categoryId:
          type: string
          description: The category the product belongs to.
        name:
          type: string
          description: The name of the product.
        descripiton:
          type: string
          description: The product description.
        price:
          type: number
          description: The price of the object
        imageUrls:
          type: array
          items:
            type: string
            description: a url to an image for the product
  User:
    type: object
    required:
      - username
      - passsword
    properties:
      userName:
        type: string
        description: The user's name
      password:
        type: string
  accessToken:
    type: string
  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      fields:
        type: string
